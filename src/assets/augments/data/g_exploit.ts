import { ActionContext } from "../../context";
import { StatEnum, StatObject, statObject } from "../../stat";

import { augment, Augment } from "../augment";
import { GroupEnumAugment } from "../groupEnum";

export const g_exploit: Augment[] = [];

const DATA_BP: number[] = [6, 11];
const DATA_WEAPON_UP: number[] = [1.025, 1.04];

const makeAugmentExploit = (
  name: string,
  level: number,
  getStatObject: (ctx: ActionContext) => StatObject,
) => {
  return augment(
    name,
    level,
    GroupEnumAugment.EXPLOIT,
    [GroupEnumAugment.EXPLOIT],
    getStatObject,
  );
};

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToFire) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Fire Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToIce) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Ice Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToLightning) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Lightning Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToWind) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Wind Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext) => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToLight) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Light Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToDark) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Dark Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.time === undefined) {
        return stat;
      }

      if (ctx.time.isDayTime) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Daytime Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const weapon_up = DATA_WEAPON_UP[level_index];

    const getStatObject = (ctx: ActionContext): StatObject => {
      const stat = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.time === undefined) {
        return stat;
      }

      if (ctx.time.isNightTime) {
        stat.setStat(StatEnum.WEAPON_MELEE, weapon_up);
        stat.setStat(StatEnum.WEAPON_RANGED, weapon_up);
        stat.setStat(StatEnum.WEAPON_TECHNIQUE, weapon_up);
      }

      return stat;
    };

    g_exploit.push(
      makeAugmentExploit(
        "Nighttime Exploit",
        level_index + 1,
        getStatObject,
      ),
    );
  });
})();
