import { ActionContext } from "../../context";
import { StatEnum, StatObject, statObject } from "../../stat";

import { augment, Augment } from "../augment";
import { GroupEnumAugment } from "../groupEnum";

export const G_EXPLOIT: Augment[] = [];

const makeAugmentExploit = (
  name: string,
  level: number,
  getAwareStatObject: (ctx: ActionContext) => StatObject,
) => {
  return augment(
    name,
    level,
    GroupEnumAugment.EXPLOIT,
    [GroupEnumAugment.EXPLOIT],
    getAwareStatObject,
  );
};

// ------------------------

const DATA_BP: number[] = [6, 11];
const DATA_WEAPON_UP: number[] = [1.025, 1.04];

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });
      if (ctx.target === undefined) {
        return stat;
      }
      if (ctx.target.isWeakToFire) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Fire Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const WEAPON_UP: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToIce) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          WEAPON_UP,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          WEAPON_UP,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          WEAPON_UP,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Ice Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToLightning) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Lightning Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToWind) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Wind Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext) => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToLight) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Light Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];

    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.target === undefined) {
        return stat;
      }

      if (ctx.target.isWeakToDark) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Dark Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.time === undefined) {
        return stat;
      }

      if (ctx.time.isDayTime) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Daytime Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();

(() => {
  DATA_BP.forEach((bp, level_index) => {
    const level: number = level_index + 1;
    const weapon_up: number = DATA_WEAPON_UP[level_index];
    const _getter = (ctx: ActionContext): StatObject => {
      let stat: StatObject = statObject({
        [StatEnum.CORE_BP]: bp,
      });

      if (ctx.time === undefined) {
        return stat;
      }

      if (ctx.time.isNightTime) {
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_MELEE,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_RANGED,
          weapon_up,
        );
        stat = StatObject.setStat(
          stat,
          StatEnum.WEAPON_TECHNIQUE,
          weapon_up,
        );
      }
      return stat;
    };
    const exploit_augment: Augment = makeAugmentExploit(
      "Nighttime Exploit",
      level,
      _getter,
    );
    G_EXPLOIT.push(exploit_augment);
  });
})();
