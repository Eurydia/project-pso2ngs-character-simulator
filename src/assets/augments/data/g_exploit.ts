import { StatEnum } from "../../stat";
import augment, { Augment } from "../augment";
import GroupEnum from "../groupEnum";

const data: Augment[] = [];

const makeAugmentExploit = (
  name: string,
  level: number,
  stats: Partial<{ [K in StatEnum]: number }>,
): Augment => {
  return augment(
    name,
    level,
    GroupEnum.EXPLOIT,
    [GroupEnum.EXPLOIT],
    stats,
  );
};

(() => {
  const exploits = [
    "Fire",
    "Ice",
    "Lightning",
    "Light",
    "Wind",
    "Dark",
    "Daytime",
    "Nighttime",
  ];
  const data_bp = [6, 11];
  const data_weapon_up = [1.025, 1.04];

  for (const exploit of exploits) {
    data_bp.forEach((bp, level_index) => {
      const weapon_up_value = data_weapon_up[level_index];
      data.push(
        makeAugmentExploit(`${exploit} Exploit`, level_index + 1, {
          [StatEnum.CORE_BP]: bp,
          [StatEnum.WEAPON_MELEE]: weapon_up_value,
          [StatEnum.WEAPON_RANGED]: weapon_up_value,
          [StatEnum.WEAPON_TECHNIQUE]: weapon_up_value,
        }),
      );
    });
  }

  // --------------------------------------
  // inactive
  data_bp.forEach((bp, level_index) => {
    data.push(
      makeAugmentExploit("Inactive Exploit", level_index + 1, {
        [StatEnum.CORE_BP]: bp,
      }),
    );
  });
})();

export default data;
